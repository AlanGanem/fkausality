# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks_dev/estimators.ipynb (unless otherwise specified).

__all__ = ['SMFormulaWrapper', 'SMWrapper', 'SMFormulaWrapper', 'SMWrapper']

# Cell
import numpy as np
import pandas as pd

from sklearn.base import BaseEstimator, RegressorMixin
import statsmodels.api as sm

from .kernel import JaccardForestKernel
from .utils import hstack, vstack
from .dist import sample_from_neighbors_continuous, estimate_mean_and_variance_from_neighbors_mixture

# Cell


class SMFormulaWrapper(BaseEstimator, RegressorMixin):
    """
    A sklearn-style wrapper for formula-based statsmodels regressors,
    thanks to https://nelsonauner.com/data/2018/05/21/wrap-statsmodels-in-sklearn.html
    """
    def __init__(self, model_class, formula):
        self.model_class = model_class
        self.formula = formula
    def fit(self, X, y=None):
        self.model_ = self.model_class(self.formula, data=X)
        self.results_ = self.model_.fit()
    def predict(self, X):
        return self.results_.predict(X)

class SMWrapper(BaseEstimator, RegressorMixin):
    """
    A universal sklearn-style wrapper for statsmodels regressors ,
    thanks to https://stackoverflow.com/questions/41045752/using-statsmodel-estimations-with-scikit-learn-cross-validation-is-it-possible/
    """
    def __init__(self, model_class, fit_intercept=True):
        self.model_class = model_class
        self.fit_intercept = fit_intercept
    def fit(self, X, y):
        if self.fit_intercept:
            X = sm.add_constant(X)
        self.model_ = self.model_class(y, X)
        self.results_ = self.model_.fit()
        return self
    def predict(self, X):
        if self.fit_intercept:
            X = sm.add_constant(X)
        return self.results_.predict(X)

# Cell
import numpy as np
import pandas as pd

from sklearn.base import BaseEstimator, RegressorMixin
import statsmodels.api as sm

from .kernel import JaccardForestKernel
from .utils import hstack, vstack
from .dist import sample_from_neighbors_continuous, estimate_mean_and_variance_from_neighbors_mixture

# Cell


class SMFormulaWrapper(BaseEstimator, RegressorMixin):
    """
    A sklearn-style wrapper for formula-based statsmodels regressors,
    thanks to https://nelsonauner.com/data/2018/05/21/wrap-statsmodels-in-sklearn.html
    """
    def __init__(self, model_class, formula):
        self.model_class = model_class
        self.formula = formula
    def fit(self, X, y=None):
        self.model_ = self.model_class(self.formula, data=X)
        self.results_ = self.model_.fit()
    def predict(self, X):
        return self.results_.predict(X)

class SMWrapper(BaseEstimator, RegressorMixin):
    """
    A universal sklearn-style wrapper for statsmodels regressors ,
    thanks to https://stackoverflow.com/questions/41045752/using-statsmodel-estimations-with-scikit-learn-cross-validation-is-it-possible/
    """
    def __init__(self, model_class, fit_intercept=True):
        self.model_class = model_class
        self.fit_intercept = fit_intercept
    def fit(self, X, y):
        if self.fit_intercept:
            X = sm.add_constant(X)
        self.model_ = self.model_class(y, X)
        self.results_ = self.model_.fit()
        return self
    def predict(self, X):
        if self.fit_intercept:
            X = sm.add_constant(X)
        return self.results_.predict(X)